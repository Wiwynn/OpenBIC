From 6445a07e852ae34a91ce5117588ebd0681f92de0 Mon Sep 17 00:00:00 2001
From: Billy Tsai <billy_tsai@aspeedtech.com>
Date: Mon, 19 Dec 2022 18:03:00 +0800
Subject: [PATCH 29/30] i3c: aspeed: Separates the event of ibi and data
 consume.

The interrupt resp_q_ready indicate the event of ibi transfer done, data
read by master and master write data. The differnet of these events list
below:
1. if it include the signal ibi_update: ibi transfer done
2. if the response data contain the data length > 0: master write data.
3. others: data read by master.
This patch separates the wait event of the ibi and data consume, making
ISR can signal the appropriate event.

Signed-off-by: Billy Tsai <billy_tsai@aspeedtech.com>
Change-Id: I2f741d2031efc27d1611050db924116983f4ba64
---
 drivers/i3c/i3c_aspeed.c | 45 ++++++++++++++++++++++------------------
 1 file changed, 25 insertions(+), 20 deletions(-)

diff --git a/drivers/i3c/i3c_aspeed.c b/drivers/i3c/i3c_aspeed.c
index 392fb1279a..c704e36fde 100644
--- a/drivers/i3c/i3c_aspeed.c
+++ b/drivers/i3c/i3c_aspeed.c
@@ -539,7 +539,8 @@ struct i3c_aspeed_obj {
 
 	/* slave mode data */
 	struct i3c_slave_setup slave_data;
-	osEventFlagsId_t event_id;
+	osEventFlagsId_t ibi_event;
+	osEventFlagsId_t data_event;
 };
 
 #define DEV_CFG(dev)			((struct i3c_aspeed_config *)(dev)->config)
@@ -672,25 +673,29 @@ static void i3c_aspeed_end_xfer(struct i3c_aspeed_obj *obj)
 	k_sem_give(&obj->curr_xfer->sem);
 }
 
-static void i3c_aspeed_slave_rx_data(struct i3c_aspeed_obj *obj)
+static void i3c_aspeed_slave_resp_handler(struct i3c_aspeed_obj *obj, union i3c_intr_s status)
 {
 	struct i3c_register_s *i3c_register = obj->config->base;
 	const struct i3c_slave_callbacks *cb;
 	uint32_t nresp, i;
 
 	cb = obj->slave_data.callbacks;
-	if (!cb) {
-		goto flush;
-	}
-
 	nresp = i3c_register->queue_status_level.fields.resp_buf_blr;
 	for (i = 0; i < nresp; i++) {
 		union i3c_device_resp_queue_port_s resp;
 		struct i3c_slave_payload *payload;
 
 		resp.value = i3c_register->resp_queue_port.value;
+		if (resp.fields.err_status) {
+			LOG_ERR("Respons Error: 0x%x\n", resp.fields.err_status);
+		}
+
 		if (resp.fields.data_length && !resp.fields.err_status &&
 		    resp.fields.tid == SLAVE_TID_MASTER_WRITE_DATA) {
+			if (!cb) {
+				__ASSERT(0, "flush rx fifo is TBD\n");
+				continue;
+			}
 			if (cb->write_requested) {
 				payload = cb->write_requested(obj->slave_data.dev);
 				payload->size = resp.fields.data_length;
@@ -700,11 +705,13 @@ static void i3c_aspeed_slave_rx_data(struct i3c_aspeed_obj *obj)
 			if (cb->write_done) {
 				cb->write_done(obj->slave_data.dev);
 			}
+		} else {
+			if (status.fields.ibi_update)
+				osEventFlagsSet(obj->ibi_event, status.value);
+			else
+				osEventFlagsSet(obj->data_event, status.value);
 		}
 	}
-	return;
-flush:
-	__ASSERT(0, "flush rx fifo is TBD\n");
 }
 
 static int i3c_aspeed_parse_ibi_status(uint32_t value, struct i3c_ibi_status *result)
@@ -845,13 +852,10 @@ static void i3c_aspeed_isr(const struct device *dev)
 			LOG_WRN("Master read when CMDQ is empty\n");
 
 		if (status.fields.resp_q_ready) {
-			i3c_aspeed_slave_rx_data(obj);
+			i3c_aspeed_slave_resp_handler(obj, status);
 		}
 
 		i3c_aspeed_slave_event(dev, status);
-
-		osEventFlagsSet(obj->event_id, status.value);
-
 	} else {
 		if (status.fields.resp_q_ready) {
 			i3c_aspeed_end_xfer(obj);
@@ -862,7 +866,6 @@ static void i3c_aspeed_isr(const struct device *dev)
 		}
 	}
 
-
 	if (status.fields.xfr_error) {
 		i3c_register->device_ctrl.fields.resume = 1;
 	}
@@ -1382,9 +1385,10 @@ static int i3c_aspeed_slave_wait_data_consume(const struct device *dev)
 	struct i3c_aspeed_obj *obj = DEV_DATA(dev);
 	union i3c_intr_s events;
 
+	osEventFlagsClear(obj->data_event, ~osFlagsError);
 	events.value = 0;
 	events.fields.resp_q_ready = 1;
-	osEventFlagsWait(obj->event_id, events.value, osFlagsWaitAny, osWaitForever);
+	osEventFlagsWait(obj->data_event, events.value, osFlagsWaitAny, osWaitForever);
 
 	return 0;
 }
@@ -1409,7 +1413,7 @@ int i3c_aspeed_slave_put_read_data(const struct device *dev, struct i3c_slave_pa
 			return -EACCES;
 		}
 
-		osEventFlagsClear(obj->event_id, ~osFlagsError);
+		osEventFlagsClear(obj->ibi_event, ~osFlagsError);
 		events.value = 0;
 		events.fields.ibi_update = 1;
 		events.fields.resp_q_ready = 1;
@@ -1443,7 +1447,7 @@ int i3c_aspeed_slave_put_read_data(const struct device *dev, struct i3c_slave_pa
 
 	if (ibi_notify) {
 		i3c_register->i3c_slave_intr_req.fields.sir = 1;
-		osEventFlagsWait(obj->event_id, events.value, osFlagsWaitAll, osWaitForever);
+		osEventFlagsWait(obj->ibi_event, events.value, osFlagsWaitAll, osWaitForever);
 	}
 
 	i3c_aspeed_slave_wait_data_consume(dev);
@@ -1469,7 +1473,7 @@ int i3c_aspeed_slave_send_sir(const struct device *dev, struct i3c_ibi_payload *
 		return -EACCES;
 	}
 
-	osEventFlagsClear(obj->event_id, ~osFlagsError);
+	osEventFlagsClear(obj->ibi_event, ~osFlagsError);
 	events.value = 0;
 	events.fields.ibi_update = 1;
 	events.fields.resp_q_ready = 1;
@@ -1491,7 +1495,7 @@ int i3c_aspeed_slave_send_sir(const struct device *dev, struct i3c_ibi_payload *
 
 	/* trigger the hw and wait done */
 	i3c_register->i3c_slave_intr_req.fields.sir = 1;
-	osEventFlagsWait(obj->event_id, events.value, osFlagsWaitAll, osWaitForever);
+	osEventFlagsWait(obj->ibi_event, events.value, osFlagsWaitAll, osWaitForever);
 
 	return 0;
 }
@@ -1710,7 +1714,8 @@ static int i3c_aspeed_init(const struct device *dev)
 
 	i3c_aspeed_enable(obj);
 
-	obj->event_id = osEventFlagsNew(NULL);
+	obj->ibi_event = osEventFlagsNew(NULL);
+	obj->data_event = osEventFlagsNew(NULL);
 
 	return 0;
 }
-- 
2.24.1

