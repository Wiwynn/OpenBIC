From 6ee50b28d2086da6bcbb6a02782fbf706a49d924 Mon Sep 17 00:00:00 2001
From: Billy Tsai <billy_tsai@aspeedtech.com>
Date: Tue, 29 Mar 2022 12:50:32 +0800
Subject: [PATCH 04/11] peci: aspeed: Avoid race condition of accessing peci
 device.

Use semaphore to avoid mulitple threads to access peci device at the
same time.

Signed-off-by: Billy Tsai <billy_tsai@aspeedtech.com>
Change-Id: If7a03e39102ec129bded316f120577e43333b6b1
---
 drivers/peci/peci_aspeed.c | 53 ++++++++++++++++++++++++++------------
 1 file changed, 37 insertions(+), 16 deletions(-)

diff --git a/drivers/peci/peci_aspeed.c b/drivers/peci/peci_aspeed.c
index cca319e141..db2dd0a1da 100644
--- a/drivers/peci/peci_aspeed.c
+++ b/drivers/peci/peci_aspeed.c
@@ -39,6 +39,7 @@ struct peci_aspeed_data {
 #ifdef CONFIG_PECI_ASPEED_INTERRUPT_DRIVEN
 	osEventFlagsId_t evt_id;
 #endif
+	struct k_sem xfer_sem;
 	uint32_t clk_src;
 	uint32_t freq;
 };
@@ -74,6 +75,7 @@ static int peci_aspeed_init(const struct device *dev)
 	const struct device *reset_dev = device_get_binding(ASPEED_RST_CTRL_NAME);
 	control_register_t control;
 
+	k_sem_init(&DEV_DATA(dev)->xfer_sem, 1, 1);
 #ifdef CONFIG_PECI_ASPEED_INTERRUPT_DRIVEN
 	DEV_DATA(dev)->evt_id = osEventFlagsNew(NULL);
 #endif
@@ -118,6 +120,8 @@ static int peci_aspeed_configure(const struct device *dev, uint32_t bitrate)
 	uint32_t bus_clk_rate;
 	int delta_value, delta_tmp;
 
+	k_sem_take(&DEV_DATA(dev)->xfer_sem, K_FOREVER);
+
 	if (freq > ASPEED_PECI_BUS_FREQ_MAX || freq < ASPEED_PECI_BUS_FREQ_MIN) {
 		LOG_WRN("Invalid clock-frequency : %u, Use default : %u\n", freq,
 			ASPEED_PECI_BUS_FREQ_DEFAULT);
@@ -169,6 +173,8 @@ static int peci_aspeed_configure(const struct device *dev, uint32_t bitrate)
 	control.fields.peci_clock_divider = clk_div_val;
 	peci_register->control.value =  control.value;
 
+	k_sem_give(&DEV_DATA(dev)->xfer_sem);
+
 	return 0;
 }
 
@@ -177,6 +183,7 @@ static int peci_aspeed_disable(const struct device *dev)
 	peci_register_t *peci_register = DEV_CFG(dev)->base;
 	control_register_t control;
 
+	k_sem_take(&DEV_DATA(dev)->xfer_sem, K_FOREVER);
 	/* PECI disable */
 	control.value = peci_register->control.value;
 	control.fields.enable_peci_clock = 0;
@@ -187,6 +194,8 @@ static int peci_aspeed_disable(const struct device *dev)
 	/* Disable interrupts */
 	peci_register->interrupt.value &= ~(ASPEED_PECI_INT_MASK);
 #endif
+	k_sem_give(&DEV_DATA(dev)->xfer_sem);
+
 	return 0;
 }
 
@@ -195,6 +204,7 @@ static int peci_aspeed_enable(const struct device *dev)
 	peci_register_t *peci_register = DEV_CFG(dev)->base;
 	control_register_t control;
 
+	k_sem_take(&DEV_DATA(dev)->xfer_sem, K_FOREVER);
 	/* PECI enable */
 	control.value = peci_register->control.value;
 	control.fields.enable_peci_clock = 1;
@@ -205,6 +215,8 @@ static int peci_aspeed_enable(const struct device *dev)
 	/* Enable interrupts */
 	peci_register->interrupt.value |= ASPEED_PECI_INT_MASK;
 #endif
+	k_sem_give(&DEV_DATA(dev)->xfer_sem);
+
 	return 0;
 }
 
@@ -234,11 +246,14 @@ static int peci_aspeed_transfer(const struct device *dev, struct peci_msg *msg)
 	uint32_t reg_index, byte_index;
 	write_data_register_t write_val;
 	uint32_t status;
+	int ret = 0, flag_ret;
 
+	k_sem_take(&DEV_DATA(dev)->xfer_sem, K_FOREVER);
 	status = peci_register->command.value & ~(0x1);
 	if (status != 0) {
 		LOG_ERR("peci status = %x\n", status);
-		return -EBUSY;
+		ret = -EBUSY;
+		goto finish;
 	}
 	LOG_DBG("msg header addr= 0x%08x, tx_len = 0x%08x, rx_len = 0x%08x , cmd_code = 0x%08x, flag = 0x%08x\n",
 		msg->addr, msg->tx_buffer.len, msg->rx_buffer.len,
@@ -284,33 +299,36 @@ static int peci_aspeed_transfer(const struct device *dev, struct peci_msg *msg)
 	/* Toggle command fire */
 	peci_register->command.value |= BIT(0);
 #ifdef CONFIG_PECI_ASPEED_INTERRUPT_DRIVEN
-	int ret;
-	ret = osEventFlagsWait(peci_data->evt_id, BIT(PECI_INT_CMD_DONE), osFlagsWaitAll,
+	flag_ret = osEventFlagsWait(peci_data->evt_id, BIT(PECI_INT_CMD_DONE), osFlagsWaitAll,
 			       DEV_CFG(dev)->cmd_timeout_ms);
 	peci_register->command.value &= ~BIT(0);
-	if (ret != BIT(PECI_INT_CMD_DONE)) {
-		if (ret < 0) {
-			if (ret == osFlagsErrorTimeout) {
+	if (flag_ret != BIT(PECI_INT_CMD_DONE)) {
+		if (flag_ret < 0) {
+			if (flag_ret == osFlagsErrorTimeout) {
 				osEventFlagsDelete(peci_data->evt_id);
 				peci_aspeed_init(dev);
 				peci_aspeed_configure(dev,
 						      DEV_DATA(dev)->freq / 1000);
 				peci_aspeed_enable(dev);
-				return -ETIMEDOUT;
+				ret = -ETIMEDOUT;
+				goto finish;
 			}
-			LOG_ERR("osError: %d\n", ret);
+			LOG_ERR("osError: %d\n", flag_ret);
 		} else {
-			osEventFlagsClear(peci_data->evt_id, ret);
-			if (ret & BIT(PECI_INT_W_FCS_ABORT)) {
+			osEventFlagsClear(peci_data->evt_id, flag_ret);
+			if (flag_ret & BIT(PECI_INT_W_FCS_ABORT)) {
 				LOG_ERR("FCS Abort\n");
-				return -EOPNOTSUPP;
-			} else if (ret & BIT(PECI_INT_W_FCS_BAD)) {
+				ret = -EOPNOTSUPP;
+				goto finish;
+			} else if (flag_ret & BIT(PECI_INT_W_FCS_BAD)) {
 				LOG_ERR("FCS Bad\n");
-				return -EILSEQ;
+				ret = -EILSEQ;
+				goto finish;
 			}
 		}
-		LOG_ERR("No valid response: 0x%08x!\n", ret);
-		return -EIO;
+		LOG_ERR("No valid response: 0x%08x!\n", flag_ret);
+		ret = -EIO;
+		goto finish;
 	}
 #else
 	while (!peci_register->interrupt_status.fields.peci_done_interrupt_status)
@@ -341,7 +359,10 @@ static int peci_aspeed_transfer(const struct device *dev, struct peci_msg *msg)
 	}
 	msg->rx_buffer.buf[msg->rx_buffer.len] =
 		peci_register->captured_fcs_data.fields.captured_read_fcs;
-	return 0;
+finish:
+	k_sem_give(&DEV_DATA(dev)->xfer_sem);
+
+	return ret;
 }
 
 static const struct peci_driver_api peci_aspeed_driver = {
-- 
2.25.1

