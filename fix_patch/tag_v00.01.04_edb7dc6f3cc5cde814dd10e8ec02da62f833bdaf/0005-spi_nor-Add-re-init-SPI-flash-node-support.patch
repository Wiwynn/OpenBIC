From f4a49682d3e5a211d8569db14aeb451930a7137c Mon Sep 17 00:00:00 2001
From: Ren Chen <ren_chen@wiwynn.com>
Date: Wed, 20 Apr 2022 14:57:22 +0800
Subject: [PATCH 05/11] spi_nor: Add re-init SPI flash node support

With "re-init-support" property, user can re-init flash flash
at any time after booting up to system in order to satisfy
some specific usages.
---
 drivers/flash/spi_nor_multi_dev.c   | 63 ++++++++++++++++++++++-------
 dts/bindings/mtd/jedec,spi-nor.yaml |  7 ++++
 include/drivers/spi_nor.h           |  1 +
 3 files changed, 56 insertions(+), 15 deletions(-)

diff --git a/drivers/flash/spi_nor_multi_dev.c b/drivers/flash/spi_nor_multi_dev.c
index a6b52b6c1d..c5a4cb1782 100644
--- a/drivers/flash/spi_nor_multi_dev.c
+++ b/drivers/flash/spi_nor_multi_dev.c
@@ -34,6 +34,9 @@ LOG_MODULE_REGISTER(spi_nor_multi_dev, CONFIG_FLASH_LOG_LEVEL);
 
 /* Build-time data associated with the device. */
 struct spi_nor_config {
+	/* Expected JEDEC ID, from jedec-id property */
+	uint8_t jedec_id[SPI_NOR_MAX_ID_LEN];
+
 	/* Size of device in bytes, from size property */
 	uint32_t flash_size;
 
@@ -94,6 +97,7 @@ struct spi_nor_data {
 	struct flash_parameters flash_nor_parameter;
 
 	bool init_4b_mode_once;
+	bool re_init_support;
 };
 
 #define SPI_NOR_PROT_NUM 8
@@ -1396,23 +1400,32 @@ static void spi_nor_info_init_params(
  */
 static int spi_nor_configure(const struct device *dev)
 {
+	int ret = 0;
 	struct spi_nor_data *data = dev->data;
 	const struct spi_nor_config *cfg = dev->config;
 	int rc;
 
 	data->spi = device_get_binding(data->dev_name);
 	if (!data->spi) {
-		return -EINVAL;
+		ret = -EINVAL;
+		goto end;
 	}
 
 	/* now the spi bus is configured, we can verify SPI
 	 * connectivity by reading the JEDEC ID.
 	 */
-
-	rc = spi_nor_read_jedec_id(dev, data->jedec_id);
-	if (rc != 0) {
-		LOG_ERR("JEDEC ID read failed: %d", rc);
-		return -ENODEV;
+	memset(data->jedec_id, 0x0, SPI_NOR_MAX_ID_LEN);
+	if (cfg->jedec_id[0] != 0) {
+		LOG_WRN("Using pseudo flash node info %02x %02x %02x",
+			cfg->jedec_id[0], cfg->jedec_id[1], cfg->jedec_id[2]);
+		memcpy(data->jedec_id, cfg->jedec_id, SPI_NOR_MAX_ID_LEN);
+	} else {
+		rc = spi_nor_read_jedec_id(dev, data->jedec_id);
+		if (rc != 0) {
+			LOG_ERR("JEDEC ID read failed: %d", rc);
+			ret = -ENODEV;
+			goto end;
+		}
 	}
 
 	/* Check for block protect bits that need to be cleared.  This
@@ -1432,7 +1445,8 @@ static int spi_nor_configure(const struct device *dev)
 
 		if (rc != 0) {
 			LOG_ERR("BP clear failed: %d\n", rc);
-			return -ENODEV;
+			ret = -ENODEV;
+			goto end;
 		}
 
 		release_device(dev);
@@ -1444,18 +1458,22 @@ static int spi_nor_configure(const struct device *dev)
 		rc = spi_nor_process_sfdp(dev);
 		if (rc != 0) {
 			LOG_ERR("[%d]SFDP read failed: %d", __LINE__, rc);
-			return -ENODEV;
+			ret = -ENODEV;
+			goto end;
 		}
 	}
 
 	rc = sfdp_post_fixup(dev);
-	if (rc != 0)
-		return -ENODEV;
+	if (rc != 0) {
+		ret = -ENODEV;
+		goto end;
+	}
 
 	rc = setup_pages_layout(dev);
 	if (rc != 0) {
 		LOG_ERR("layout setup failed: %d", rc);
-		return -ENODEV;
+		ret = -ENODEV;
+		goto end;
 	}
 
 	data->flash_nor_parameter.flash_size = dev_flash_size(dev);
@@ -1463,7 +1481,8 @@ static int spi_nor_configure(const struct device *dev)
 	if (data->flash_size > 0x1000000 && !data->flag_access_32bit) {
 		rc = spi_nor_config_4byte_mode(dev, true);
 		if (rc != 0)
-			return -ENODEV;
+			ret = -ENODEV;
+			goto end;
 	}
 
 	const struct spi_driver_api *api =
@@ -1478,7 +1497,8 @@ static int spi_nor_configure(const struct device *dev)
 		rc = api->spi_nor_op->read_init(data->spi,
 				&data->spi_cfg, read_op_info);
 		if (rc != 0)
-			return -ENODEV;
+			ret = -ENODEV;
+			goto end;
 	}
 
 	if (api->spi_nor_op && api->spi_nor_op->write_init) {
@@ -1490,7 +1510,8 @@ static int spi_nor_configure(const struct device *dev)
 		rc = api->spi_nor_op->write_init(data->spi,
 				&data->spi_cfg, write_op_info);
 		if (rc != 0)
-			return -ENODEV;
+			ret = -ENODEV;
+			goto end;
 	}
 
 	LOG_DBG("%s: %d MB flash", dev->name, dev_flash_size(dev) >> 20);
@@ -1501,7 +1522,18 @@ static int spi_nor_configure(const struct device *dev)
 		data->cmd_info.read_opcode, data->cmd_info.read_dummy,
 		data->cmd_info.pp_opcode, data->cmd_info.se_opcode, data->sector_size / 1024);
 
-	return 0;
+end:
+	if (ret != 0 && data->re_init_support) {
+		ret = 0;
+		data->re_init_support = false;
+	}
+
+	return ret;
+}
+
+int spi_nor_re_init(const struct device *dev)
+{
+	return spi_nor_configure(dev);
 }
 
 /**
@@ -1573,6 +1605,7 @@ static const struct flash_driver_api spi_nor_api = {
 			.flash_size = 0,	\
 		},	\
 		.init_4b_mode_once = false,	\
+		.re_init_support = DT_PROP(DT_INST(n, DT_DRV_COMPAT), re_init_support),	\
 	};	\
 		\
 	DEVICE_DT_INST_DEFINE(n, &spi_nor_init, NULL,	\
diff --git a/dts/bindings/mtd/jedec,spi-nor.yaml b/dts/bindings/mtd/jedec,spi-nor.yaml
index 6444dd5e04..b4b11f66b5 100644
--- a/dts/bindings/mtd/jedec,spi-nor.yaml
+++ b/dts/bindings/mtd/jedec,spi-nor.yaml
@@ -49,3 +49,10 @@ properties:
   write-block-size:
     type: int
     required: false
+
+  re-init-support:
+    type: boolean
+    required: false
+    description: |
+      User can re-probe SPI flash at any time after
+      booting up to system.
diff --git a/include/drivers/spi_nor.h b/include/drivers/spi_nor.h
index 289826973f..317a5a5f68 100644
--- a/include/drivers/spi_nor.h
+++ b/include/drivers/spi_nor.h
@@ -140,5 +140,6 @@ struct spi_nor_op_info {
 };
 
 int spi_nor_config_4byte_mode(const struct device *dev, bool en4b);
+int spi_nor_re_init(const struct device *dev);
 
 #endif /*__SPI_NOR_H__*/
-- 
2.25.1

